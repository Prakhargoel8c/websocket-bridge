# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from src.jarvis_proto import jarvis_nlp_core_pb2 as src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2


class JarvisCoreNLPStub(object):
  """
  The Jarvis Core NLP Service provides generic NLP services for custom
  model use cases. The intent of this service is to allow users to design
  models for arbitrary use cases that conform simply with input and output types
  specified in the service. As an explicit example, the ClassifyText function
  could be used for sentiment classification, domain recognition, language
  identification, etc.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ClassifyText = channel.unary_unary(
        '/nvidia.jarvis.nlp.JarvisCoreNLP/ClassifyText',
        request_serializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TextClassRequest.SerializeToString,
        response_deserializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TextClassResponse.FromString,
        )
    self.ClassifyTokens = channel.unary_unary(
        '/nvidia.jarvis.nlp.JarvisCoreNLP/ClassifyTokens',
        request_serializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TokenClassRequest.SerializeToString,
        response_deserializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TokenClassResponse.FromString,
        )
    self.TransformText = channel.unary_unary(
        '/nvidia.jarvis.nlp.JarvisCoreNLP/TransformText',
        request_serializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TextTransformRequest.SerializeToString,
        response_deserializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TextTransformResponse.FromString,
        )


class JarvisCoreNLPServicer(object):
  """
  The Jarvis Core NLP Service provides generic NLP services for custom
  model use cases. The intent of this service is to allow users to design
  models for arbitrary use cases that conform simply with input and output types
  specified in the service. As an explicit example, the ClassifyText function
  could be used for sentiment classification, domain recognition, language
  identification, etc.
  """

  def ClassifyText(self, request, context):
    """ClassifyText takes as input an input/query string and parameters related
    to the requested model to use to evaluate the text. The service evaluates the
    text with the requested model, and returns one or more classifications.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ClassifyTokens(self, request, context):
    """ClassifyTokens takes as input either a string or list of tokens and parameters
    related to which model to use. The service evaluates the text with the requested
    model, performing additional tokenization if necessary, and returns one or more
    class labels per token.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TransformText(self, request, context):
    """TransformText takes an input/query string and parameters related to the
    requested model and returns another string. The behavior of the function
    is defined entirely by the underlying model and may be used for
    tasks like translation, question/answer, augment the input directly, etc.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_JarvisCoreNLPServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ClassifyText': grpc.unary_unary_rpc_method_handler(
          servicer.ClassifyText,
          request_deserializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TextClassRequest.FromString,
          response_serializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TextClassResponse.SerializeToString,
      ),
      'ClassifyTokens': grpc.unary_unary_rpc_method_handler(
          servicer.ClassifyTokens,
          request_deserializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TokenClassRequest.FromString,
          response_serializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TokenClassResponse.SerializeToString,
      ),
      'TransformText': grpc.unary_unary_rpc_method_handler(
          servicer.TransformText,
          request_deserializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TextTransformRequest.FromString,
          response_serializer=src_dot_jarvis__proto_dot_jarvis__nlp__core__pb2.TextTransformResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'nvidia.jarvis.nlp.JarvisCoreNLP', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
