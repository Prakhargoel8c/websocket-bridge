# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from src.jarvis_proto import jarvis_asr_pb2 as src_dot_jarvis__proto_dot_jarvis__asr__pb2


class JarvisASRStub(object):
  """
  The JarvisASR service provides two mechanisms for converting speech to text.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Recognize = channel.unary_unary(
        '/nvidia.jarvis.asr.JarvisASR/Recognize',
        request_serializer=src_dot_jarvis__proto_dot_jarvis__asr__pb2.RecognizeRequest.SerializeToString,
        response_deserializer=src_dot_jarvis__proto_dot_jarvis__asr__pb2.RecognizeResponse.FromString,
        )
    self.StreamingRecognize = channel.stream_stream(
        '/nvidia.jarvis.asr.JarvisASR/StreamingRecognize',
        request_serializer=src_dot_jarvis__proto_dot_jarvis__asr__pb2.StreamingRecognizeRequest.SerializeToString,
        response_deserializer=src_dot_jarvis__proto_dot_jarvis__asr__pb2.StreamingRecognizeResponse.FromString,
        )


class JarvisASRServicer(object):
  """
  The JarvisASR service provides two mechanisms for converting speech to text.
  """

  def Recognize(self, request, context):
    """Recognize expects a RecognizeRequest and returns a RecognizeResponse. This request will block
    until the audio is uploaded, processed, and a transcript is returned.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamingRecognize(self, request_iterator, context):
    """StreamingRecognize is a non-blocking API call that allows audio data to be fed to the server in
    chunks as it becomes available. Depending on the configuration in the StreamingRecognizeRequest,
    intermediate results can be sent back to the client. Recognition ends when the stream is closed
    by the client.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_JarvisASRServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Recognize': grpc.unary_unary_rpc_method_handler(
          servicer.Recognize,
          request_deserializer=src_dot_jarvis__proto_dot_jarvis__asr__pb2.RecognizeRequest.FromString,
          response_serializer=src_dot_jarvis__proto_dot_jarvis__asr__pb2.RecognizeResponse.SerializeToString,
      ),
      'StreamingRecognize': grpc.stream_stream_rpc_method_handler(
          servicer.StreamingRecognize,
          request_deserializer=src_dot_jarvis__proto_dot_jarvis__asr__pb2.StreamingRecognizeRequest.FromString,
          response_serializer=src_dot_jarvis__proto_dot_jarvis__asr__pb2.StreamingRecognizeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'nvidia.jarvis.asr.JarvisASR', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
