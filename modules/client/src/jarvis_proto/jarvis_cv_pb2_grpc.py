# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from src.jarvis_proto import jarvis_cv_pb2 as src_dot_jarvis__proto_dot_jarvis__cv__pb2


class JarvisVisionStub(object):
  """
  The Jarvis Vision service provides methods for obtaining inference results
  for various vision models.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetGaze = channel.unary_unary(
        '/nvidia.jarvis.vision.JarvisVision/GetGaze',
        request_serializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.GazeRequest.SerializeToString,
        response_deserializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.GazeResponse.FromString,
        )
    self.GetFaceDetect = channel.unary_unary(
        '/nvidia.jarvis.vision.JarvisVision/GetFaceDetect',
        request_serializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.FaceDetectRequest.SerializeToString,
        response_deserializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.FaceDetectResponse.FromString,
        )
    self.GetFacialLandmarks = channel.unary_unary(
        '/nvidia.jarvis.vision.JarvisVision/GetFacialLandmarks',
        request_serializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.FacialLandmarksRequest.SerializeToString,
        response_deserializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.FacialLandmarksResponse.FromString,
        )


class JarvisVisionServicer(object):
  """
  The Jarvis Vision service provides methods for obtaining inference results
  for various vision models.
  """

  def GetGaze(self, request, context):
    """
    Given a GazeRequest for Gaze inference, outputs a GazeResponse.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetFaceDetect(self, request, context):
    """
    Given a FaceDetectRequest for FaceDetect inference, outputs a
    FaceDetectResponse.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetFacialLandmarks(self, request, context):
    """
    Given a FacialLandmarksRequest for FacialLandmarks inference,
    outputs a FacialLandmarksResponse.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_JarvisVisionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetGaze': grpc.unary_unary_rpc_method_handler(
          servicer.GetGaze,
          request_deserializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.GazeRequest.FromString,
          response_serializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.GazeResponse.SerializeToString,
      ),
      'GetFaceDetect': grpc.unary_unary_rpc_method_handler(
          servicer.GetFaceDetect,
          request_deserializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.FaceDetectRequest.FromString,
          response_serializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.FaceDetectResponse.SerializeToString,
      ),
      'GetFacialLandmarks': grpc.unary_unary_rpc_method_handler(
          servicer.GetFacialLandmarks,
          request_deserializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.FacialLandmarksRequest.FromString,
          response_serializer=src_dot_jarvis__proto_dot_jarvis__cv__pb2.FacialLandmarksResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'nvidia.jarvis.vision.JarvisVision', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
